server:
  port: 8080

---

spring:
  profiles: dev
  datasource:
    url: jdbc:mysql://${DB_HOST}:3306/party_management_dev?serverTimezone=Asia/Seoul
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    initialization-mode: always
  jpa:
    database: mysql
    show-sql : true
#    generate-ddl: true
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments : true
  cloud:
   stream:
     kafka:
       binder:
         brokers: kafka.kafka.svc.cluster.local:9092
       bindings:
         partyRegistered-out:
           producer:
             configuration:
               key:
                 serializer: org.apache.kafka.common.serialization.StringSerializer
         partyRegisteredReject-in-0:
           consumer:
             configuration:
               key:
                 deserializer: org.apache.kafka.common.serialization.StringDeserializer
         partyStatusChanged-in-0:
           consumer:
             configuration:
               key:
                 deserializer: org.apache.kafka.common.serialization.StringDeserializer
         partyStatusChangedReject-out:
           producer:
             configuration:
               key:
                 serializer: org.apache.kafka.common.serialization.StringSerializer
         partyMemberAccept-in-0:
           consumer:
             configuration:
               key:
                 deserializer: org.apache.kafka.common.serialization.StringDeserializer
         partyMemberAcceptReject-out:
           producer:
             configuration:
               key:
                 serializer: org.apache.kafka.common.serialization.StringSerializer
         partyMemberCanceled-in-0:
           consumer:
             configuration:
               key:
                 deserializer: org.apache.kafka.common.serialization.StringDeserializer
         partyMemberCanceledReject-out:
           producer:
             configuration:
               key:
                 serializer: org.apache.kafka.common.serialization.StringSerializer
     bindings:
       partyRegistered-out:
         destination: party-registered
         contentType: application/json
       partyRegisteredReject-in-0:
         destination: party-registered-reject
       partyStatusChanged-in-0:
         destination: party-status-changed
       partyStatusChangedReject-out:
         destination: party-status-changed-reject
         contentType: application/json
       partyMemberAccept-in-0:
         destination: party-member-accept
       partyMemberAcceptReject-out:
         destination: party-member-accept-reject
         contentType: application/json
       partyMemberCanceled-in-0:
         destination: party-member-canceled
       partyMemberCanceledReject-out:
         destination: party-member-canceled-reject
         contentType: application/json

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

api:
  url:
    user: http://localhost:8081/api/user

management:
  endpoint:
    health:
      probes:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true

# server:
#   port: 8081
# ---
# spring:
#   # datasource:
#   #   url:  jdbc:h2:~/test
#   #   driverClassName: org.h2.Driver
#   #   username: sa
#   #   password:
#   #   initialization-mode: always

#   # h2:
#   #   console:
#   #     enabled: true
#   datasource:
#     url: jdbc:mysql://localhost:3307/testdb?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
#     driverClassName: org.h2.Driver
#     username: root
#     password: root
#     driver-class-name: com.mysql.cj.jdbc.Driver
#   jpa:
#     database: mysql
#     show-sql : true
#     database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
#     properties:
#       hibernate:
#         show_sql: true
#         format_sql: true
#         use_sql_comments : true
# spring:
#   profiles: docker
#   cloud:
#     stream:
#       kafka:
#         binder:
#           brokers: my-kafka:9092
#         streams:
#           binder:
#             configuration:
#               default:
#                 key:
#                   serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                 value:
#                   serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#       bindings:
#         event-in:
#           group: PartyManagement
#           destination: partymanagement
#           contentType: application/json
#         event-out:
#           destination: partymanagement
#           contentType: application/json


